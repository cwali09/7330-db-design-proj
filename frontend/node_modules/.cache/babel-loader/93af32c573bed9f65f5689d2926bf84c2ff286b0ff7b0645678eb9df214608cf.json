{"ast":null,"code":"import axios from 'axios';\n\n// Determine the base URL for the API.\n// Use the backend port defined in the backend's .env file (or default).\n// Make sure the backend server is running.\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// --- Project Endpoints ---\nconst createProject = projectData => {\n  return apiClient.post('/projects', projectData);\n};\nconst associatePosts = (projectName, postIds) => {\n  // Ensure projectName is URL-encoded if it might contain special characters\n  const encodedProjectName = encodeURIComponent(projectName);\n  return apiClient.post(`/projects/${encodedProjectName}/posts`, {\n    postIds\n  });\n};\nconst addAnalysisResult = (projectName, resultData) => {\n  const encodedProjectName = encodeURIComponent(projectName);\n  // Assuming resultData is { postId, fieldName, value }\n  return apiClient.post(`/projects/${encodedProjectName}/results`, resultData);\n};\n\n// --- Post Query Endpoint ---\nconst queryPosts = criteria => {\n  // Remove empty criteria before sending\n  const activeCriteria = Object.entries(criteria).filter(([key, value]) => value !== null && value !== '').reduce((obj, [key, value]) => {\n    obj[key] = value;\n    return obj;\n  }, {});\n  return apiClient.get('/posts/query', {\n    params: activeCriteria\n  });\n};\n\n// --- Experiment Query Endpoint ---\nconst queryExperiment = projectName => {\n  const encodedProjectName = encodeURIComponent(projectName);\n  return apiClient.get(`/experiments/${encodedProjectName}`);\n};\n\n// Export functions\nconst apiService = {\n  createProject,\n  associatePosts,\n  addAnalysisResult,\n  queryPosts,\n  queryExperiment\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","createProject","projectData","post","associatePosts","projectName","postIds","encodedProjectName","encodeURIComponent","addAnalysisResult","resultData","queryPosts","criteria","activeCriteria","Object","entries","filter","key","value","reduce","obj","get","params","queryExperiment","apiService"],"sources":["/Users/walichaudhary/Desktop/school/grad/spring 2025/DB Design/final-project/7330-db-design-proj/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\n// Determine the base URL for the API.\n// Use the backend port defined in the backend's .env file (or default).\n// Make sure the backend server is running.\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// --- Project Endpoints ---\nconst createProject = (projectData) => {\n  return apiClient.post('/projects', projectData);\n};\n\nconst associatePosts = (projectName, postIds) => {\n  // Ensure projectName is URL-encoded if it might contain special characters\n  const encodedProjectName = encodeURIComponent(projectName);\n  return apiClient.post(`/projects/${encodedProjectName}/posts`, { postIds });\n};\n\nconst addAnalysisResult = (projectName, resultData) => {\n  const encodedProjectName = encodeURIComponent(projectName);\n  // Assuming resultData is { postId, fieldName, value }\n  return apiClient.post(`/projects/${encodedProjectName}/results`, resultData);\n};\n\n// --- Post Query Endpoint ---\nconst queryPosts = (criteria) => {\n  // Remove empty criteria before sending\n  const activeCriteria = Object.entries(criteria)\n    .filter(([key, value]) => value !== null && value !== '')\n    .reduce((obj, [key, value]) => {\n      obj[key] = value;\n      return obj;\n    }, {});\n\n  return apiClient.get('/posts/query', { params: activeCriteria });\n};\n\n// --- Experiment Query Endpoint ---\nconst queryExperiment = (projectName) => {\n  const encodedProjectName = encodeURIComponent(projectName);\n  return apiClient.get(`/experiments/${encodedProjectName}`);\n};\n\n\n// Export functions\nconst apiService = {\n  createProject,\n  associatePosts,\n  addAnalysisResult,\n  queryPosts,\n  queryExperiment,\n};\n\nexport default apiService; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,aAAa,GAAIC,WAAW,IAAK;EACrC,OAAOL,SAAS,CAACM,IAAI,CAAC,WAAW,EAAED,WAAW,CAAC;AACjD,CAAC;AAED,MAAME,cAAc,GAAGA,CAACC,WAAW,EAAEC,OAAO,KAAK;EAC/C;EACA,MAAMC,kBAAkB,GAAGC,kBAAkB,CAACH,WAAW,CAAC;EAC1D,OAAOR,SAAS,CAACM,IAAI,CAAC,aAAaI,kBAAkB,QAAQ,EAAE;IAAED;EAAQ,CAAC,CAAC;AAC7E,CAAC;AAED,MAAMG,iBAAiB,GAAGA,CAACJ,WAAW,EAAEK,UAAU,KAAK;EACrD,MAAMH,kBAAkB,GAAGC,kBAAkB,CAACH,WAAW,CAAC;EAC1D;EACA,OAAOR,SAAS,CAACM,IAAI,CAAC,aAAaI,kBAAkB,UAAU,EAAEG,UAAU,CAAC;AAC9E,CAAC;;AAED;AACA,MAAMC,UAAU,GAAIC,QAAQ,IAAK;EAC/B;EACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,OAAO,CAACH,QAAQ,CAAC,CAC5CI,MAAM,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAKA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,EAAE,CAAC,CACxDC,MAAM,CAAC,CAACC,GAAG,EAAE,CAACH,GAAG,EAAEC,KAAK,CAAC,KAAK;IAC7BE,GAAG,CAACH,GAAG,CAAC,GAAGC,KAAK;IAChB,OAAOE,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EAER,OAAOvB,SAAS,CAACwB,GAAG,CAAC,cAAc,EAAE;IAAEC,MAAM,EAAET;EAAe,CAAC,CAAC;AAClE,CAAC;;AAED;AACA,MAAMU,eAAe,GAAIlB,WAAW,IAAK;EACvC,MAAME,kBAAkB,GAAGC,kBAAkB,CAACH,WAAW,CAAC;EAC1D,OAAOR,SAAS,CAACwB,GAAG,CAAC,gBAAgBd,kBAAkB,EAAE,CAAC;AAC5D,CAAC;;AAGD;AACA,MAAMiB,UAAU,GAAG;EACjBvB,aAAa;EACbG,cAAc;EACdK,iBAAiB;EACjBE,UAAU;EACVY;AACF,CAAC;AAED,eAAeC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}